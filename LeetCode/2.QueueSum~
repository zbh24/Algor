Accepted


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        ListNode *p,*q,*node,*head;
        int value,count;
        
        head = p = (ListNode *)malloc(sizeof(ListNode));
        count = 0;
        while (l1 != NULL && l2 != NULL) {
            value = (l1->val + l2->val + count) % 10;
            count = (l1->val + l2->val + count) / 10;
            node = (ListNode *)malloc(sizeof(ListNode));
            node->val = value;
            node->next = NULL;
            p->next = node;
            p = p->next;
            l1 = l1->next;
            l2 = l2->next;
        }
        // length is equal
        if (l1 ==NULL && l2 == NULL) {
            if (count != 0) {
                node = (ListNode *)malloc(sizeof(ListNode));
                node->val = count;
                node->next = NULL;
                p->next = node;
                p = p->next;
            }
            head = head->next;
            return head;
        }
        if(l1 == NULL) {
            q = l2;
        } else {
            q = l1;
        }
        while (q != NULL) {
            value = (q->val + count) % 10;
            count = (q->val + count) / 10;
            node = (ListNode *)malloc(sizeof(ListNode));
            node->val = value;
            node->next = NULL;
            p->next = node;
            p = p->next;
            q = q->next;
        }
        if (count != 0) {
            node = (ListNode *)malloc(sizeof(ListNode));
            node->val = count;
            node->next = NULL;
            p->next = node;
            p = p->next;
        }
        head = head->next;
        return head;
    }
};
